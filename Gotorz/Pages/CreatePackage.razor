@page "/packages/create"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Gotorz.ViewModels
@using Gotorz.Services
@inject TravelpackageService TravelpackageService
@inject NavigationManager Navigation
@inject HotelService HotelService
@inject HotelApiService HotelApiService

<h3>Opret ny rejsepakke</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning" role="alert">
        @errorMessage
    </div>
}
<EditForm Model="@formModel" OnValidSubmit="HandleCreatePackage">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container mt-3">
        <div class="row">
            <!-- Venstre kolonne -->
            <div class="col-md-6">

                <div class="mb-3">
                    <label>Destination</label>
                    <InputText @bind-Value="formModel.Destination" class="form-control" />
                </div>

                <div class="mb-3">
                    <label>Afrejsedato</label>
                    <InputDate @bind-Value="formModel.DepartureDate" class="form-control" />
                </div>

                <div class="mb-3">
                    <label>Returdato</label>
                    <InputDate @bind-Value="formModel.ReturnDate" class="form-control" />
                </div>

                <div class="mb-3">
                    <label>Afgangslufthavn</label>
                    <InputText @bind-Value="formModel.OriginAirport" class="form-control" placeholder="f.eks. CPH" />
                </div>

                <div class="mb-3">
                    <label>Valuta</label>
                    <InputText @bind-Value="formModel.Currency" class="form-control" placeholder="f.eks. USD" />
                </div>

                <div class="mb-3">
                    <label>Antal voksne</label>
                    <InputNumber @bind-Value="formModel.Adults" class="form-control" />
                </div>

                <div class="mb-3">
                    <label>Antal børn</label>
                    <InputNumber @bind-Value="formModel.Kids" class="form-control" />
                </div>

                <div class="mb-3">
                    <label>Antal værelser</label>
                    <InputNumber @bind-Value="formModel.Rooms" class="form-control" />
                </div>

                <div class="mb-3">
                    <label>Vælg hotel</label>
                    <InputSelect @bind-Value="formModel.SelectedHotelId" class="form-control" @onchange="OnHotelSelected">
                        <option value="">-- Vælg hotel --</option>
                        @foreach (var hotel in formModel.AvailableHotels)
                        {
                            <option value="@hotel.Id">@hotel.Name (@hotel.City)</option>
                        }
                    </InputSelect>
                </div>
           @if (formModel.AvailableRooms.Any())
{
    <div class="mb-3">
        <label>Vælg værelse:</label>
        <InputSelect @bind-Value="formModel.SelectedRoomType" class="form-control" @onchange="OnRoomSelected">
            <option value="">-- Vælg værelse --</option>
            @foreach (var room in formModel.AvailableRooms)
            {
                <option value="@room">@room</option>
            }
        </InputSelect>
    </div>
}

<div class="mb-3">
    <label>Pris på valgt værelse:</label>
    @if (formModel.HotelPrice.HasValue)
    {
        <div class="form-control">
            @formModel.HotelPrice.Value.ToString("C") <!-- viser fx 1.234,00 kr. -->
        </div>
    }
    else
    {
        <div class="form-control text-muted">Ingen pris tilgængelig</div>
    }
</div>

                }
             
                <div class="mb-3">
                    <label>Beskrivelse</label>
                    <InputTextArea @bind-Value="formModel.Description" class="form-control" />
                </div>

                <div class="mb-3">
                    <label>Billede (URL)</label>
                    <InputText @bind-Value="formModel.ImageUrl" class="form-control" />
                </div>

                <div class="mb-3">
                    <label>Pris (manuelt, valgfrit)</label>
                    <InputNumber @bind-Value="formModel.ManualPriceOverride" class="form-control" />
                </div>

                <div class="mb-3">
                    <label>Påslag i %</label>
                    <InputNumber @bind-Value="formModel.MarkupPercent" class="form-control" />
                </div>

                <button class="btn btn-secondary mb-2" type="button" @onclick="LoadFlights">Hent fly info</button>
                <button class="btn btn-primary" type="submit">Gem pakke</button>
                <div class="d-flex mb-3">
                    <button class="btn btn-warning me-2" type="button" @onclick="LoadHotelPriceAndRooms">
                        🔍 Hent hotelpris/værelser
                    </button>

                    <button class="btn btn-primary" type="button" @onclick="LoadFlights">
                        ✈️ Hent flymuligheder
                    </button>
                </div>

            </div>

            <!-- Højre kolonne -->
            <div class="col-md-6">
                @if (formModel.AvailableFlights.Count > 0)
                {
                    <div style="max-height: 400px; overflow-y: auto;">
                        @for (int i = 0; i < formModel.AvailableFlights.Count; i++)
                        {
                            var f = formModel.AvailableFlights[i];
                            <div class="card mb-2 @(formModel.SelectedFlightIndex == i ? "border-primary" : "")"
                            @onclick="@(() => SelectFlight(i))"
                            style="cursor: pointer;">
                                <div class="card-body">
                                    <p><strong>Flyselskab:</strong> @f.Airline</p>

                                    <ul class="list-unstyled">
                                        @foreach (var flightSegment in f.Flights)
                                        {
                                            <li>@flightSegment</li>
                                        }
                                    </ul>

                                    <p><strong>Samlet varighed:</strong> @f.Duration</p>
                                    <p><strong>Pris:</strong> @f.Price</p>
                                </div>
                            </div>
                        }
                    </div>
                }


                @if (formModel.SelectedHotel != null)
                {
                    <div class="card mb-3">
                        <div class="card-header bg-success text-white">Hotelinformation</div>
                        <div class="card-body">
                            <p><strong>@formModel.SelectedHotel.Name</strong></p>
                            <p>@formModel.SelectedHotel.Address</p>
                            <p>
                                Fra-pris:
                                @(formModel.HotelPrice.HasValue
                                    ? formModel.HotelPrice.Value.ToString("C")
                                    : "Ikke tilgængelig")
                            </p>

                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(bestVendorName))
                {
                    <div class="mt-2">
                        <strong>Billigste fundet hos:</strong> @bestVendorName til <strong>@bestVendorPrice.ToString("C")</strong>
                    </div>
                }


                <div class="alert alert-info mt-3">
                    <strong>Slutpris (med evt. påslag):</strong> @formModel.FinalPrice.ToString("C")
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private TravelPackageFormViewModel formModel = new();
    private string? errorMessage;
    private string bestVendorName = string.Empty;
    private decimal bestVendorPrice = 0;


    public CreatePackage()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        formModel.AvailableHotels = await HotelService.GetAllHotelsAsync();
    }
    private async Task LoadHotelPriceAndRooms()
    {
        await OnHotelSelected(new ChangeEventArgs { Value = formModel.SelectedHotelId });
    }
    private void UpdateHotelPrice()
    {
        // Når brugeren klikker "Opdater hotelpris", genberegner vi prisen baseret på valgt værelse
        RecalculateFinalPrice();
    }

    private async Task OnHotelSelected(ChangeEventArgs e)
    {
        Console.WriteLine($"🏨 OnHotelSelected kaldt med værdi: {e.Value}");

        var selectedId = int.Parse(e.Value?.ToString() ?? "0");
        formModel.SelectedHotel = await HotelService.GetHotelDetailsAsync(selectedId);

        if (formModel.SelectedHotel == null)
            return;

        var hotelApiResult = await HotelApiService.SearchHotelPricesAsync(
            formModel.SelectedHotel.Country,
            formModel.SelectedHotel.ApiHotelId,
            formModel.DepartureDate,
            formModel.ReturnDate,
            formModel.Currency,
            formModel.Adults,
            formModel.Kids,
            formModel.Rooms
        );

        if (hotelApiResult?.Comparison != null && hotelApiResult.Comparison.Any())
        {
            var flatList = hotelApiResult.Comparison.FirstOrDefault();
            if (flatList != null)
            {
                foreach (var vendorEntry in flatList)
                {
                    if (vendorEntry.TryGetValue("vendor2", out var vendorName) && vendorName == "Booking.com")
                    {
                        if (vendorEntry.TryGetValue("price2", out var priceStr) && !string.IsNullOrWhiteSpace(priceStr))
                        {
                            if (decimal.TryParse(priceStr.Replace("$", "").Trim(), out var price))
                            {
                                bestVendorName = vendorName;
                                bestVendorPrice = price;
                                formModel.HotelPrice = price;
                            }
                        }
                        break; // Stop efter Booking.com
                    }
                }
            }

            // Tilføj værelser hvis tilgængelige
            formModel.AvailableRooms = hotelApiResult.Rooms.Select(r => r.Room).ToList();
        }
        else
        {
            bestVendorName = string.Empty;
            bestVendorPrice = 0;
            formModel.HotelPrice = null;
            formModel.AvailableRooms = new List<string>();
        }

        RecalculateFinalPrice();
        StateHasChanged();
    }



    private void OnRoomSelected(ChangeEventArgs e)
    {
      

        formModel.SelectedRoomType = e.Value?.ToString();
        // Eventuelt genberegn pris hvis vi har mere avanceret senere
        RecalculateFinalPrice();
    }

    private decimal ParsePrice(string? priceString)
    {
        if (decimal.TryParse(priceString?.Replace("USD", "").Replace(",", "").Trim(), out var price))
            return price;
        return 0;
    }
    private string? GetLowestVendorPrice(List<List<Dictionary<string, string>>> comparison)
    {
        var flatList = comparison.FirstOrDefault();
        if (flatList == null) return null;

        var prices = new List<decimal>();

        foreach (var vendorEntry in flatList)
        {
            foreach (var kvp in vendorEntry)
            {
                if (kvp.Key.StartsWith("price") &&
                    decimal.TryParse(kvp.Value?.Replace("$", "").Replace(",", "").Trim(), out var parsedPrice))
                {
                    prices.Add(parsedPrice);
                }
            }
        }

        return prices.Any() ? prices.Min().ToString("0.00") : null;
    }
    private (string VendorName, decimal Price) GetLowestVendorAndPrice(List<List<Dictionary<string, string>>> comparison)
    {
        var flatList = comparison.FirstOrDefault();
        if (flatList == null) return ("", 0);

        string bestVendor = "";
        decimal lowestPrice = decimal.MaxValue;

        foreach (var vendorEntry in flatList)
        {
            foreach (var kvp in vendorEntry)
            {
                if (kvp.Key.StartsWith("price") && decimal.TryParse(kvp.Value?.Replace("$", "").Replace(",", ""), out var price))
                {
                    if (price < lowestPrice)
                    {
                        lowestPrice = price;

                        // Find vendor-navn
                        var vendorKey = "vendor" + kvp.Key.Replace("price", "");
                        vendorEntry.TryGetValue(vendorKey, out bestVendor);
                    }
                }
            }
        }

        return (bestVendor, lowestPrice);
    }




    private async Task LoadFlights()
    {
        errorMessage = null;

        if (formModel.DepartureDate == default || formModel.ReturnDate == default)
        {
            errorMessage = "❗ Du skal vælge både afrejsedato og returdato, før du kan hente fly.";
            return;
        }

        var result = await TravelpackageService.CreateFlightOptionsAsync(
            formModel.OriginAirport,
            formModel.Destination,
            formModel.DepartureDate,
            formModel.ReturnDate,
            formModel.Currency);

        if (result != null)
        {
            formModel.AvailableFlights = result.AvailableFlights;
            formModel.SelectedFlightIndex = 0;
            RecalculateFinalPrice();
        }
    }

    private void RecalculateFinalPrice()
    {
        decimal flightPrice = 0;

        if (formModel.AvailableFlights != null &&
            formModel.AvailableFlights.Count > 0 &&
            formModel.SelectedFlightIndex >= 0 &&
            formModel.SelectedFlightIndex < formModel.AvailableFlights.Count)
        {
            var selectedFlight = formModel.AvailableFlights[formModel.SelectedFlightIndex];
            if (decimal.TryParse(selectedFlight?.Price?.Replace("USD", "").Replace(",", "").Trim(), out var parsedFlightPrice))
            {
                flightPrice = parsedFlightPrice;
            }
        }

        // Vi gemmer flyprisen på formModel
        formModel.FlightPrice = flightPrice.ToString("F2");


        // HotelPrice er allerede sat når hotel vælges.
        // FinalPrice BEREGNES automatisk i ViewModel når den bruges.

        // 🚫 Ingen formModel.FinalPrice = ... mere!
    }

    private async Task HandleCreatePackage()
    {
        formModel.FlightPackage = formModel.AvailableFlights.ElementAtOrDefault(formModel.SelectedFlightIndex);
        await TravelpackageService.SaveTravelPackageAsync(formModel);
        Navigation.NavigateTo("/packages");
    }

    private void SelectFlight(int index)
    {
        formModel.SelectedFlightIndex = index;
        RecalculateFinalPrice();
    }
}
