@page "/admin/hotels"
@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@using Gotorz.Domain
@using Gotorz.ViewModels
@using Microsoft.EntityFrameworkCore

<h3>Administrer hoteller</h3>

<EditForm Model="@formModel" OnValidSubmit="HandleAddHotel">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Navn</label>
        <InputText @bind-Value="formModel.Name" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Adresse</label>
        <InputText @bind-Value="formModel.Address" class="form-control" />
    </div>
    <div class="mb-3">
        <label>API Hotel ID</label>
        <InputText @bind-Value="formModel.ApiHotelId" class="form-control" />
    </div>

    <button class="btn btn-success" type="submit">Gem hotel</button>
</EditForm>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alert alert-info mt-2">@StatusMessage</div>
}

<hr />

<h5>Eksisterende hoteller</h5>
@if (hotels is null)
{
    <p><em>Indlæser...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Navn</th>
                <th>Adresse</th>
                <th>API Hotel ID</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hotel in hotels)
            {
                <tr>
                    <td>@hotel.Name</td>
                    <td>@hotel.Address</td>
                    <td>@hotel.ApiHotelId</td>
                    <td>
                        @if (hotelIdToDelete == hotel.Id)
                        {
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => hotelIdToDelete = null">Annuller</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteHotel(hotel.Id)">Bekræft</button>
                        }
                        else
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => hotelIdToDelete = hotel.Id">Slet</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Hotel> hotels = new();
    private HotelFormViewModel formModel = new();
    private string? StatusMessage;
    private int? hotelIdToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        hotels = await Db.Hotels.ToListAsync();
    }

    private async Task HandleAddHotel()
    {
        if (!string.IsNullOrWhiteSpace(formModel.Name) &&
            !string.IsNullOrWhiteSpace(formModel.Address) &&
            !string.IsNullOrWhiteSpace(formModel.ApiHotelId))
        {
            var hotel = new Hotel
                {
                    Name = formModel.Name,
                    Address = formModel.Address,
                    ApiHotelId = formModel.ApiHotelId
                };

            Db.Hotels.Add(hotel);
            await Db.SaveChangesAsync();

            hotels = await Db.Hotels.ToListAsync();
            StatusMessage = "Hotel oprettet ✅";
            formModel = new();
        }
        else
        {
            StatusMessage = "Alle felter skal udfyldes.";
        }
    }

    private async Task ConfirmDeleteHotel(int id)
    {
        var hotel = await Db.Hotels.FindAsync(id);
        if (hotel != null)
        {
            Db.Hotels.Remove(hotel);
            await Db.SaveChangesAsync();
            hotels = await Db.Hotels.ToListAsync();
            StatusMessage = "Hotel slettet ✅";
            hotelIdToDelete = null;
        }
    }
}

